
// Generated by Cadence Genus Synthesis Solution GENUS15.13 - 15.10-s038_1

// Verification Directory fv/top 

module decrement_unsigned(A, CI, Z);
  input [15:0] A;
  input CI;
  output [16:0] Z;
  wire [15:0] A;
  wire CI;
  wire [16:0] Z;
  wire n_35, n_36, n_37, n_38, n_39, n_40, n_41, n_42;
  wire n_43, n_44, n_45, n_46, n_47, n_48, n_49, n_50;
  wire n_51, n_52, n_53, n_54, n_55, n_56, n_57, n_58;
  wire n_59, n_60, n_61, n_62, n_63, n_64, n_65, n_66;
  wire n_67, n_68, n_69, n_70, n_71, n_72, n_73, n_74;
  wire n_75, n_76, n_77, n_78, n_79, n_80, n_81, n_82;
  wire n_83, n_84, n_85, n_86, n_87, n_88, n_89, n_90;
  wire n_91, n_92, n_93, n_94, n_95, n_96, n_97, n_98;
  wire n_99, n_100, n_101;
  not g1 (n_35, A[0]);
  not g10 (n_43, A[8]);
  not g11 (n_44, A[9]);
  not g12 (n_45, A[10]);
  not g13 (n_46, A[11]);
  not g14 (n_47, A[12]);
  not g15 (n_48, A[13]);
  not g16 (n_49, A[14]);
  not g17 (n_50, A[15]);
  nor g18 (n_51, n_36, A[1]);
  nand g19 (n_52, n_37, n_38);
  nand g2 (n_36, n_35, CI);
  nand g20 (n_54, n_39, n_40);
  nand g21 (n_55, n_41, n_42);
  nand g22 (n_56, n_43, n_44);
  nand g23 (n_57, n_45, n_46);
  nand g24 (n_58, n_47, n_48);
  nand g25 (n_59, n_49, n_50);
  nand g26 (n_81, n_37, n_51);
  not g27 (n_53, n_52);
  nand g28 (n_60, n_51, n_53);
  nor g29 (n_61, n_54, A[6]);
  nor g30 (n_63, n_54, n_55);
  nor g31 (n_71, n_56, A[10]);
  nor g32 (n_65, n_56, n_57);
  nor g33 (n_67, n_58, A[14]);
  nor g34 (n_68, n_58, n_59);
  nor g35 (n_84, n_60, A[4]);
  nor g36 (n_85, n_54, n_60);
  not g37 (n_62, n_61);
  nor g38 (n_86, n_60, n_62);
  not g39 (n_64, n_63);
  not g4 (n_37, A[2]);
  nor g40 (n_69, n_60, n_64);
  nand g41 (n_72, n_47, n_65);
  not g42 (n_66, n_58);
  nand g43 (n_74, n_65, n_66);
  nand g44 (n_76, n_65, n_67);
  nand g45 (n_78, n_65, n_68);
  nand g46 (n_87, n_43, n_69);
  not g47 (n_70, n_56);
  nand g48 (n_89, n_69, n_70);
  nand g49 (n_91, n_71, n_69);
  not g5 (n_38, A[3]);
  nand g50 (n_93, n_65, n_69);
  not g51 (n_73, n_72);
  nand g52 (n_95, n_69, n_73);
  not g53 (n_75, n_74);
  nand g54 (n_97, n_69, n_75);
  not g55 (n_77, n_76);
  nand g56 (n_99, n_69, n_77);
  not g57 (n_79, n_78);
  nand g58 (n_101, n_69, n_79);
  xor g59 (Z[0], A[0], CI);
  not g6 (n_39, A[4]);
  not g60 (n_80, n_36);
  xor g61 (Z[1], A[1], n_80);
  xor g62 (Z[2], A[2], n_51);
  not g63 (n_82, n_81);
  xor g64 (Z[3], A[3], n_82);
  not g65 (n_83, n_60);
  xor g66 (Z[4], A[4], n_83);
  xor g67 (Z[5], A[5], n_84);
  xor g68 (Z[6], A[6], n_85);
  xor g69 (Z[7], A[7], n_86);
  not g7 (n_40, A[5]);
  xor g70 (Z[8], A[8], n_69);
  not g71 (n_88, n_87);
  xor g72 (Z[9], A[9], n_88);
  not g73 (n_90, n_89);
  xor g74 (Z[10], A[10], n_90);
  not g75 (n_92, n_91);
  xor g76 (Z[11], A[11], n_92);
  not g77 (n_94, n_93);
  xor g78 (Z[12], A[12], n_94);
  not g79 (n_96, n_95);
  not g8 (n_41, A[6]);
  xor g80 (Z[13], A[13], n_96);
  not g81 (n_98, n_97);
  xor g82 (Z[14], A[14], n_98);
  not g83 (n_100, n_99);
  xor g84 (Z[15], A[15], n_100);
  not g85 (Z[16], n_101);
  not g9 (n_42, A[7]);
endmodule

module top(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done,
     prev_state, prev_cnt, prev_cnt_len, cnt, state);
  input clk, ena, rst;
  input [7:0] Tsync, Tgdel;
  input [15:0] Tgate, Tlen, prev_cnt, prev_cnt_len;
  input [4:0] prev_state;
  output Sync, Gate, Done;
  output [15:0] cnt;
  output [4:0] state;
  wire clk, ena, rst;
  wire [7:0] Tsync, Tgdel;
  wire [15:0] Tgate, Tlen, prev_cnt, prev_cnt_len;
  wire [4:0] prev_state;
  wire Sync, Gate, Done;
  wire [15:0] cnt;
  wire [4:0] state;
  wire [16:0] cnt_nxt;
  wire [16:0] cnt_len_nxt;
  wire n_122, n_123, n_124, n_125, n_126, n_179, n_270, n_341;
  wire n_343, n_344, n_345, n_346, n_350, n_398, n_416, n_417;
  wire n_432, n_434, n_436, n_438, n_715, n_725, n_734, n_776;
  wire n_781, n_783, n_802, n_803, n_837, n_947, n_985, n_992;
  wire n_1005, n_1007, n_1008, n_1009, n_1010, n_1011, n_1012, n_1013;
  wire n_1014, n_1015, n_1016, n_1017, n_1018, n_1019, n_1020, n_1021;
  wire n_1022, n_1023, n_1024, n_1025, n_1026, n_1027, n_1028, n_1029;
  wire n_1030, n_1031, n_1032, n_1033, n_1034, n_1035;
  assign state[1] = Sync;
  assign state[3] = Gate;
  decrement_unsigned dec_sub_109_39_1(.A (prev_cnt), .CI (1'b1), .Z
       (cnt_nxt));
  decrement_unsigned dec_sub_112_47_2(.A (prev_cnt_len), .CI (1'b1), .Z
       (cnt_len_nxt));
  CDN_mux5 mux_cnt_123_11_g560(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[6]), .sel2 (n_783), .data2 (cnt_nxt[6]),
       .sel3 (state[2]), .data3 (Tgdel[6]), .sel4 (Gate), .data4
       (Tgate[6]), .z (cnt[6]));
  CDN_mux5 mux_cnt_123_11_g564(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[5]), .sel2 (n_783), .data2 (cnt_nxt[5]),
       .sel3 (state[2]), .data3 (Tgdel[5]), .sel4 (Gate), .data4
       (Tgate[5]), .z (cnt[5]));
  CDN_mux5 mux_cnt_123_11_g568(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[4]), .sel2 (n_783), .data2 (cnt_nxt[4]),
       .sel3 (state[2]), .data3 (Tgdel[4]), .sel4 (Gate), .data4
       (Tgate[4]), .z (cnt[4]));
  CDN_mux5 mux_cnt_123_11_g572(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[3]), .sel2 (n_783), .data2 (cnt_nxt[3]),
       .sel3 (state[2]), .data3 (Tgdel[3]), .sel4 (Gate), .data4
       (Tgate[3]), .z (cnt[3]));
  CDN_mux5 mux_cnt_123_11_g576(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[2]), .sel2 (n_783), .data2 (cnt_nxt[2]),
       .sel3 (state[2]), .data3 (Tgdel[2]), .sel4 (Gate), .data4
       (Tgate[2]), .z (cnt[2]));
  CDN_mux5 mux_cnt_123_11_g580(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[1]), .sel2 (n_783), .data2 (cnt_nxt[1]),
       .sel3 (state[2]), .data3 (Tgdel[1]), .sel4 (Gate), .data4
       (Tgate[1]), .z (cnt[1]));
  CDN_mux5 mux_cnt_123_11_g584(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[0]), .sel2 (n_783), .data2 (cnt_nxt[0]),
       .sel3 (state[2]), .data3 (Tgdel[0]), .sel4 (Gate), .data4
       (Tgate[0]), .z (cnt[0]));
  CDN_mux3 mux_cnt_123_11_g588(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[14]), .sel2 (Gate), .data2 (Tgate[14]),
       .z (cnt[14]));
  CDN_mux3 mux_cnt_123_11_g592(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[13]), .sel2 (Gate), .data2 (Tgate[13]),
       .z (cnt[13]));
  CDN_mux3 mux_cnt_123_11_g596(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[12]), .sel2 (Gate), .data2 (Tgate[12]),
       .z (cnt[12]));
  CDN_mux3 mux_cnt_123_11_g600(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[11]), .sel2 (Gate), .data2 (Tgate[11]),
       .z (cnt[11]));
  CDN_mux3 mux_cnt_123_11_g604(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[10]), .sel2 (Gate), .data2 (Tgate[10]),
       .z (cnt[10]));
  CDN_mux3 mux_cnt_123_11_g608(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[9]), .sel2 (Gate), .data2 (Tgate[9]),
       .z (cnt[9]));
  CDN_mux3 mux_cnt_123_11_g612(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[8]), .sel2 (Gate), .data2 (Tgate[8]),
       .z (cnt[8]));
  CDN_mux5 mux_cnt_123_11_g616(.sel0 (n_781), .data0 (1'b0), .sel1
       (Sync), .data1 (Tsync[7]), .sel2 (n_783), .data2 (cnt_nxt[7]),
       .sel3 (state[2]), .data3 (Tgdel[7]), .sel4 (Gate), .data4
       (Tgate[7]), .z (cnt[7]));
  CDN_mux3 mux_cnt_123_11_g620(.sel0 (n_803), .data0 (1'b0), .sel1
       (n_783), .data1 (cnt_nxt[15]), .sel2 (Gate), .data2 (Tgate[15]),
       .z (cnt[15]));
  nor g22 (n_125, n_345, prev_state[0]);
  nor g20 (n_124, n_344, prev_state[0]);
  nor g18 (n_123, n_343, prev_state[0]);
  nor g24 (n_126, n_346, prev_state[0]);
  not g553 (n_776, Done);
  nor g642 (n_416, ena, rst);
  not g731 (n_947, Sync);
  not g832 (n_985, state[2]);
  not g836 (state[0], n_1005);
  not g862 (n_1007, prev_state[0]);
  not g863 (n_1008, rst);
  not g864 (n_1009, ena);
  not g865 (n_1010, cnt_nxt[16]);
  not g866 (n_1011, prev_state[1]);
  not g867 (n_1012, prev_state[2]);
  not g868 (n_1013, prev_state[3]);
  not g869 (n_1014, prev_state[4]);
  not g870 (n_1015, cnt_len_nxt[16]);
  nand g871 (n_345, n_1014, prev_state[3], n_1012, n_1011);
  not g872 (n_1016, n_125);
  nand g873 (n_344, n_1014, n_1013, prev_state[2], n_1011);
  not g874 (n_1017, n_124);
  nand g875 (n_343, n_1014, n_1013, n_1012, prev_state[1]);
  not g876 (n_1018, n_123);
  nand g877 (n_346, prev_state[4], n_1013, n_1012, n_1011);
  not g878 (n_1019, n_126);
  nor g879 (n_398, n_1019, n_1009, rst);
  not g880 (n_1020, n_398);
  nor g881 (Done, n_1015, n_1020);
  not g882 (n_1021, n_416);
  nand g883 (n_341, n_1014, n_1013, n_1012, n_1011);
  nor g884 (n_122, n_341, n_1007);
  not g885 (n_1022, n_122);
  nor g886 (n_417, n_1022, n_1009, rst);
  not g887 (n_1023, n_417);
  nand g888 (Sync, n_1023, n_776);
  nor g889 (n_725, n_1017, n_1009, rst);
  not g890 (n_1024, n_725);
  nor g891 (n_734, n_1018, n_1009, rst);
  not g892 (n_1025, n_734);
  nor g893 (n_715, n_1016, n_1009, rst);
  not g894 (n_1026, n_715);
  nand g895 (n_837, n_1024, n_1025, n_1026);
  not g896 (n_1027, n_837);
  nor g897 (n_992, n_1027, n_1010);
  not g898 (n_1028, n_992);
  nor g899 (state[4], n_1026, n_1010);
  nor g900 (Gate, n_1024, n_1010);
  nor g901 (state[2], n_1025, n_1010);
  nand g902 (n_1005, n_947, n_1028);
  nand g903 (n_781, n_1021, n_1008);
  nand g904 (n_350, n_1018, n_1022);
  not g905 (n_1029, n_350);
  nor g906 (n_432, cnt_nxt[16], n_1025);
  not g907 (n_1030, n_432);
  nor g908 (n_434, cnt_nxt[16], n_1024);
  not g909 (n_1031, n_434);
  nor g910 (n_436, cnt_len_nxt[16], n_1020);
  not g911 (n_1032, n_436);
  nand g912 (n_270, n_1019, n_1029);
  not g913 (n_1033, n_270);
  nand g914 (n_179, n_1017, n_1033);
  nor g915 (n_438, n_179, n_1009, rst);
  not g916 (n_1034, n_438);
  nand g917 (n_802, n_1021, n_985, n_947);
  not g918 (n_1035, n_802);
  nand g919 (n_783, n_1030, n_1031, n_1032, n_1034);
  nand g920 (n_803, n_1035, n_1008);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux5(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or data0 or data1 or data2
         or data3 or data4) 
      case ({sel0, sel1, sel2, sel3, sel4})
       5'b10000: z = data0;
       5'b01000: z = data1;
       5'b00100: z = data2;
       5'b00010: z = data3;
       5'b00001: z = data4;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux5(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  or org (z, w_0, w_1, w_2, w_3, w_4);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
